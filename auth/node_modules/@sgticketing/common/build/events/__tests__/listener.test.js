"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var listener_1 = require("../listener");
var event_names_1 = require("../event-names");
var DemoListener = /** @class */ (function (_super) {
    __extends(DemoListener, _super);
    function DemoListener() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.eventName = event_names_1.EventNames.UserCreated;
        _this.onEvent = jest.fn();
        return _this;
    }
    DemoListener.prototype.subscriptionOptions = function () {
        return {};
    };
    return DemoListener;
}(listener_1.Listener));
var setup = function () {
    var onMock = jest.fn();
    var subscribeMock = jest.fn().mockReturnValue({ on: onMock });
    //@ts-ignore
    var client = {
        subscribe: subscribeMock
    };
    var listener = new DemoListener({ client: client, queueGroupName: 'groupname' });
    listener.listen();
    return { client: client, onMock: onMock, subscribeMock: subscribeMock, listener: listener };
};
it('subscribes with the given event name', function () {
    var _a = setup(), onMock = _a.onMock, subscribeMock = _a.subscribeMock;
    expect(onMock).toHaveBeenCalled();
    expect(subscribeMock).toHaveBeenCalled();
});
it('parses data before passing it to parseMessage', function () {
    var _a = setup(), onMock = _a.onMock, listener = _a.listener;
    var data = { hi: 'there' };
    onMock.mock.calls[0][1]({
        getData: function () {
            return JSON.stringify(data);
        }
    });
    expect(listener.onEvent.mock.calls[0][0]).toEqual(data);
});
